service: HMCF-WebAnno

frameworkVersion: ">=1.1.0 <2.0.0"


provider:
  name: aws
  runtime: nodejs6.10
  environment:
    USERS_DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-Users
    GROUPS_DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-Groups
    PAGES_DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-Pages
    ANNOTATIONS_DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-Annotations
    QUESTIONS_DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-Questions
    ANSWERS_DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-Answers
    COMMENTS_DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-Comments
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"

functions:
  createUser:
    handler: users/create.create
    events:
      - http:
          path: users
          method: post
          cors: true

  listUser:
    handler: users/list.list
    events:
      - http:
          path: users
          method: get
          cors: true

  getUser:
    handler: users/get.get
    events:
      - http:
          path: users/{id}
          method: get
          cors: true

  updateUser:
    handler: users/update.update
    events:
      - http:
          path: users/{id}
          method: put
          cors: true

  deleteUser:
    handler: users/delete.delete
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true

  createPage:
    handler: pages/create.create
    events:
      - http:
          path: pages
          method: post
          cors: true

  listPage:
    handler: pages/list.list
    events:
      - http:
          path: pages
          method: get
          cors: true

  getPage:
    handler: pages/get.get
    events:
      - http:
          path: pages/{id}
          method: get
          cors: true

  updatePage:
    handler: pages/update.update
    events:
      - http:
          path: pages/{id}
          method: put
          cors: true

  deletePage:
    handler: pages/delete.delete
    events:
      - http:
          path: pages/{id}
          method: delete
          cors: true

  createAnnotation:
    handler: annotations/create.create
    events:
      - http:
          path: annotations
          method: post
          cors: true

  listAnnotation:
    handler: annotations/list.list
    events:
      - http:
          path: annotations
          method: get
          cors: true

  getAnnotation:
    handler: annotations/get.get
    events:
      - http:
          path: annotations/{id}
          method: get
          cors: true

  updateAnnotation:
    handler: annotations/update.update
    events:
      - http:
          path: annotations/{id}
          method: put
          cors: true

  deleteAnnotation:
    handler: annotations/delete.delete
    events:
      - http:
          path: annotations/{id}
          method: delete
          cors: true 

  createQuestion:
    handler: questions/create.create
    events:
      - http:
          path: questions
          method: post
          cors: true

  listQuestion:
    handler: questions/list.list
    events:
      - http:
          path: questions
          method: get
          cors: true

  getQuestion:
    handler: questions/get.get
    events:
      - http:
          path: questions/{id}
          method: get
          cors: true

  updateQuestion:
    handler: questions/update.update
    events:
      - http:
          path: questions/{id}
          method: put
          cors: true
  voteQuestion:
    handler: questions/vote.update
    events:
      - http:
          path: questions/{id}/vote
          method: put
          cors: true

  deleteQuestion:
    handler: questions/delete.delete
    events:
      - http:
          path: questions/{id}
          method: delete
          cors: true  

  createAnswer:
    handler: answers/create.create
    events:
      - http:
          path: answers
          method: post
          cors: true

  listAnswer:
    handler: answers/list.list
    events:
      - http:
          path: answers
          method: get
          cors: true

  getAnswer:
    handler: answers/get.get
    events:
      - http:
          path: answers/{id}
          method: get
          cors: true

  updateAnswer:
    handler: answers/update.update
    events:
      - http:
          path: answers/{id}
          method: put
          cors: true
  voteAnswer:
    handler: answers/vote.update
    events:
      - http:
          path: answers/{id}/vote
          method: put
          cors: true
  deleteAnswer:
    handler: answers/delete.delete
    events:
      - http:
          path: answers/{id}
          method: delete
          cors: true  


  createComment:
    handler: comments/create.create
    events:
      - http:
          path: comments
          method: post
          cors: true

  listComment:
    handler: comments/list.list
    events:
      - http:
          path: comments
          method: get
          cors: true

  getComment:
    handler: comments/get.get
    events:
      - http:
          path: comments/{id}
          method: get
          cors: true

  updateComment:
    handler: comments/update.update
    events:
      - http:
          path: comments/{id}
          method: put
          cors: true

  deleteComment:
    handler: comments/delete.delete
    events:
      - http:
          path: comments/{id}
          method: delete
          cors: true  

resources:
  Resources:
    UsersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userId
            AttributeType: S   
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.USERS_DYNAMODB_TABLE}
    PagesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: pageId
            AttributeType: S   
          -
            AttributeName: pageURL
            AttributeType: S   
        KeySchema:
          -
            AttributeName: pageId
            KeyType: HASH
          -
            AttributeName: pageURL
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.PAGES_DYNAMODB_TABLE}
    AnnotationDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: annotationId
            AttributeType: S   
          -
            AttributeName: pageId
            AttributeType: S   
        KeySchema:
          -
            AttributeName: annotationId
            KeyType: HASH
          -
            AttributeName: pageId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ANNOTATIONS_DYNAMODB_TABLE}
    QuestionsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: questionId
            AttributeType: S   
          -
            AttributeName: annotationId
            AttributeType: S   
        KeySchema:
          -
            AttributeName: questionId
            KeyType: HASH
          -
            AttributeName: annotationId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.QUESTIONS_DYNAMODB_TABLE}
    AnswersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: answerId
            AttributeType: S   
          -
            AttributeName: questionId
            AttributeType: S   
        KeySchema:
          -
            AttributeName: answerId
            KeyType: HASH
          -
            AttributeName: questionId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ANSWERS_DYNAMODB_TABLE} 
    CommentsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: commentId
            AttributeType: S   
          -
            AttributeName: answerId
            AttributeType: S   
        KeySchema:
          -
            AttributeName: commentId
            KeyType: HASH
          -
            AttributeName: answerId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.COMMENTS_DYNAMODB_TABLE}                